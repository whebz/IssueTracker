@model IssueTracker.Model.ViewModel.AccountViewModel
@Styles.Render("~/static/css/new.css")
<section class="main-section">
    <div class="contact-edit-view k-widget">
        
        <h2 class="form-title"><span class="action">Create New</span> Contact</h2>

        <div class="resp-div">
            <form>
                <div class="forms-panel">
                    <input type="hidden" name="AccountId" id="AccountId" value="@Model.AccountId" />
                    @Html.Label("AccountTypeId", "Account type", new { @class = "form-label" })
                    @(Html.Kendo().DropDownList()
                    .Name("AccountTypeId")
                    .DataTextField("Description")
                    .DataValueField("Id")
                    .Value(Model.AccountTypeId)
                    .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetAccountType", "Account");
                            });
                        }))
                    @Html.Label("Name", "Name", new { @class = "form-label" })
                    @(Html.TextBoxFor(Model => Model.Name, new { @class = "k-textbox" }))
                    @Html.Label("ClientId", "Company", new { @class = "form-label" })
                    @(Html.Kendo().DropDownList()
                    .Name("ClientId")
                    .DataTextField("Name")
                    .DataValueField("Id")
                    .Value(Model.ClientId.ToString())
                    .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetClient", "Account");
                            });
                        }))
                    @Html.Label("City", "City", new { @class = "form-label" })
                    @(Html.TextBoxFor(Model => Model.City, new { @class = "k-textbox" }))
                    @Html.Label("Country", "Country", new { @class = "form-label" })
                    @(Html.TextBoxFor(Model => Model.Country, new { @class = "k-textbox" }))
                    @Html.Label("Phone", "Phone", new { @class = "form-label" })
                    @(Html.TextBoxFor(Model => Model.Phone, new { @class = "k-textbox" }))
                    @Html.Label("Email", "Email", new { @class = "form-label" })
                    @(Html.TextBoxFor(Model => Model.Email, new { @class = "k-textbox" }))
                </div>
                <div class="form-buttons">
                    <button type="button" class="k-button k-primary k-update-button" href="\\#">Save</button>
                    <button type="button" class="k-button k-cancel-button" href="\\#">Cancel</button>
                </div>
            </form>
        </div>
        <div class="resp-div">
            <div class="upload-wrapper">
                <span class="upload-image-wrapper">
                    <img class="image-preview" alt="@Model.AccountId image" />
                </span>
                @(Html.Kendo().Upload()
                    .Name("Photo")
                    .Multiple(false)
 
                    .Validation(v => v.AllowedExtensions(new string[] { ".gif", ".jpg", ".png" }))
                    .Messages(m => m
                        .Select("Add Photo ...")
                        .DropFilesHere("Drop files here to upload")
                    )
                    .Events(e => e.Select("onImageSelect"))
                )
            </div>
        </div>

        <div style="clear:both" />

    </div>
</section>
<script>
    // Create preview of the newly selected image
    function onImageSelect(e) {
        var fileInfo = e.files[0];

        if (fileInfo.validationErrors && fileInfo.validationErrors.length > 0) {
            return;
        }

        setTimeout(function () {
            addPreview(fileInfo);
        });
    }

    function addPreview(file) {
        var raw = file.rawFile;
        var reader = new FileReader();

        if (raw) {
            reader.onloadend = function () {
                var image = $('<img class="image-preview">').attr('src', this.result);
                $('.upload-image-wrapper').html(image);
            };

            reader.readAsDataURL(raw);
        }
    }
</script>