@model IssueTracker.Model.ViewModel.AccountViewModel
<div class="contact-edit-view k-widget">
    @Styles.Render("~/static/css/new.css")
    <h2 class="form-title"><span class="action">Create New</span> Contact</h2>
    <div class="forms-panel">
        <input type="hidden" name="AccountId" id="AccountId" value="@Model.AccountId" />
        @Html.Label("AccountTypeId", "Account type", new { @class = "form-label" })
        @(Html.Kendo().DropDownListFor(Model => Model.AccountTypeId)
            .Name("AccountTypeId")
            .DataTextField("Id")
          .DataValueField("Name")
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("GetClient", "Account");
              });
          })
          .AutoBind(true))

        @Html.Label("Name", "Name", new { @class = "form-label" })
        @(Html.TextBoxFor(Model => Model.Name, new { @class = "k-textbox" }))
        @Html.Label("ClientId", "Company", new { @class = "form-label" })
        @(Html.Kendo().DropDownListFor(Model => Model.ClientId))
        @Html.Label("City", "City", new { @class = "form-label" })
        @(Html.TextBoxFor(Model => Model.City, new { @class = "k-textbox" }))
        @Html.Label("Country", "Country", new { @class = "form-label" })
        @(Html.TextBoxFor(Model => Model.Country, new { @class = "k-textbox" }))
        @Html.Label("Phone", "Phone", new { @class = "form-label" })
        @(Html.TextBoxFor(Model => Model.Phone, new { @class = "k-textbox" }))
        @Html.Label("Email", "Email", new { @class = "form-label" })
        @(Html.TextBoxFor(Model => Model.Email, new { @class = "k-textbox" }))
    </div>
    <div class="upload-wrapper">
        <span class="upload-image-wrapper">
            <img class="image-preview" alt="#:AccountId # image" />
        </span>
        @(Html.Kendo().Upload()
            .Name("photo")
            .Multiple(false)
            .Async(a => a
                .Save("UploadPhoto", "Contacts")
                .Remove("RemovePhoto", "Contacts")
                .AutoUpload(true)
            )
            .Validation(v => v.AllowedExtensions(new string[] { ".gif", ".jpg", ".png" }))
            .Messages(m => m
                .Select("Add Photo ...")
                .DropFilesHere("Drop files here to upload")
            )
            .Events(e => e.Select("onImageSelect"))
        )
    </div>
    <div class="form-buttons">
        <button type="button" class="k-button k-primary k-update-button" href="\\#">Save</button>
        <button type="button" class="k-button k-cancel-button" href="\\#">Cancel</button>
    </div>
</div>