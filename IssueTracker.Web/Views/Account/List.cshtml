
@{
    ViewBag.Title = "List";
}
@model IEnumerable<IssueTracker.Model.ViewModel.AccountByType>
<div class="sidebar">
    <nav class="sidebar-nav">
        @Html.Partial("_ListSummary", Model)
    </nav>
</div>

<!-- Main content -->
<main class="main">

    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="#">Home</a></li>
        <li class="breadcrumb-item"><a href="#">Account list</a></li>
        <!-- add button -->
        <li class="breadcrumb-menu hidden">
            <div class="btn-group" role="group" aria-label="Button group with nested dropdown">
                <a class="btn btn-secondary" href="./"><i class="icon-plus"></i> &nbsp;Add new account</a>
            </div>
        </li>
    </ol>

    <div class="container-fluid">

        <div class="card">
            <div class="card-header">
                Accounts
            </div>
            <div class="card-block">



                @(Html.Kendo().Grid<IssueTracker.Model.ViewModel.AccountViewModel>()
                .Name("grid")
                .Columns(columns =>
                {
                    columns.Bound(p => p.AccountId);
                    columns.Bound(p => p.Name).Width(180);
                    columns.Bound(p => p.AccountType).Width(180);
                    columns.Bound(p => p.ClientName).Width(180);
                    columns.Command(command => { command.Destroy().Text(" "); }).Width(50);
                })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
                .Pageable()
                .Sortable()
                .Scrollable()
                .HtmlAttributes(new { style = "height:550px;" })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Model(model =>
                    {
                        model.Id(p => p.AccountId);
                        model.Field(p => p.ClientId).DefaultValue(ViewData["defaultClient"] as IssueTracker.Model.Client);
                    })
                    .PageSize(20)
                    .Read(read => read.Action("Accounts_Read", "Account"))
                    .Create(create => create.Action("Account_Create", "Account"))
                    .Update(update => update.Action("Account_Update", "Account"))
                    .Destroy(destroy => destroy.Action("Account_Destroy", "Account"))
                )
                )
            </div>
        </div>
    </div>
    <!-- /.conainer-fluid -->
</main>
